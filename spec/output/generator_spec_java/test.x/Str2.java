// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package MyXDR;

import java.io.IOException;

import static MyXDR.Constants.*;
import java.util.Base64;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.Objects;

// === xdr source ============================================================

//  typedef string str2<>;

//  ===========================================================================
public class Str2 implements XdrElement {
  private XdrString str2;

  public Str2() {}

  public Str2(XdrString str2) {
    this.str2 = str2;
  }

  public XdrString getStr2() {
    return this.str2;
  }

  public void setStr2(XdrString value) {
    this.str2 = value;
  }

  public static void encode(XdrDataOutputStream stream, Str2  encodedStr2) throws IOException {
    encodedStr2.str2.encode(stream);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }
  public static Str2 decode(XdrDataInputStream stream) throws IOException {
    Str2 decodedStr2 = new Str2();
    decodedStr2.str2 = XdrString.decode(stream, Integer.MAX_VALUE);
    return decodedStr2;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.str2);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof Str2)) {
      return false;
    }

    Str2 other = (Str2) object;
    return Objects.equals(this.str2, other.str2);
  }
  @Override
  public String toXdrBase64() throws IOException {
    return Base64.getEncoder().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static Str2 fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64.getDecoder().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static Str2 fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
