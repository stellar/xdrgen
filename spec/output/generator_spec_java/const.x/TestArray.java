// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package MyXDR;

import java.io.IOException;

import static MyXDR.Constants.*;
import java.util.Base64;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.Arrays;

// === xdr source ============================================================

//  typedef int TestArray[FOO];

//  ===========================================================================
public class TestArray implements XdrElement {
  private Integer[] TestArray;

  public TestArray() {}

  public TestArray(Integer[] TestArray) {
    this.TestArray = TestArray;
  }

  public Integer[] getTestArray() {
    return this.TestArray;
  }

  public void setTestArray(Integer[] value) {
    this.TestArray = value;
  }

  public static void encode(XdrDataOutputStream stream, TestArray  encodedTestArray) throws IOException {
    int TestArraysize = encodedTestArray.getTestArray().length;
    for (int i = 0; i < TestArraysize; i++) {
      stream.writeInt(encodedTestArray.TestArray[i]);
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }
  public static TestArray decode(XdrDataInputStream stream) throws IOException {
    TestArray decodedTestArray = new TestArray();
    int TestArraysize = FOO;
    decodedTestArray.TestArray = new Integer[TestArraysize];
    for (int i = 0; i < TestArraysize; i++) {
      decodedTestArray.TestArray[i] = stream.readInt();
    }
    return decodedTestArray;
  }

  @Override
  public int hashCode() {
    return Arrays.hashCode(this.TestArray);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof TestArray)) {
      return false;
    }

    TestArray other = (TestArray) object;
    return Arrays.equals(this.TestArray, other.TestArray);
  }
  @Override
  public String toXdrBase64() throws IOException {
    return Base64.getEncoder().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static TestArray fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64.getDecoder().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static TestArray fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
