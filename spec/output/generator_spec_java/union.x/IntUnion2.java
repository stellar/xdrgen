// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package MyXDR;

import java.io.IOException;

import static MyXDR.Constants.*;
import org.stellar.sdk.Base64Factory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.Objects;

// === xdr source ============================================================

//  typedef IntUnion IntUnion2;

//  ===========================================================================
public class IntUnion2 implements XdrElement {
  private IntUnion IntUnion2;

  public IntUnion2() {}

  public IntUnion2(IntUnion IntUnion2) {
    this.IntUnion2 = IntUnion2;
  }

  public IntUnion getIntUnion2() {
    return this.IntUnion2;
  }

  public void setIntUnion2(IntUnion value) {
    this.IntUnion2 = value;
  }

  public static void encode(XdrDataOutputStream stream, IntUnion2  encodedIntUnion2) throws IOException {
    IntUnion.encode(stream, encodedIntUnion2.IntUnion2);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }
  public static IntUnion2 decode(XdrDataInputStream stream) throws IOException {
    IntUnion2 decodedIntUnion2 = new IntUnion2();
    decodedIntUnion2.IntUnion2 = IntUnion.decode(stream);
    return decodedIntUnion2;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.IntUnion2);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof IntUnion2)) {
      return false;
    }

    IntUnion2 other = (IntUnion2) object;
    return Objects.equals(this.IntUnion2, other.IntUnion2);
  }
  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static IntUnion2 fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static IntUnion2 fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
