// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package MyXDR;

import java.io.IOException;

import static MyXDR.Constants.*;
import org.stellar.sdk.Base64Factory;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.Arrays;

// === xdr source ============================================================

//  typedef int Arr[2];

//  ===========================================================================
public class Arr implements XdrElement {
  private Integer[] Arr;

  public Arr() {}

  public Arr(Integer[] Arr) {
    this.Arr = Arr;
  }

  public Integer[] getArr() {
    return this.Arr;
  }

  public void setArr(Integer[] value) {
    this.Arr = value;
  }

  public static void encode(XdrDataOutputStream stream, Arr  encodedArr) throws IOException {
    int Arrsize = encodedArr.getArr().length;
    for (int i = 0; i < Arrsize; i++) {
      stream.writeInt(encodedArr.Arr[i]);
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }
  public static Arr decode(XdrDataInputStream stream) throws IOException {
    Arr decodedArr = new Arr();
    int Arrsize = 2;
    decodedArr.Arr = new Integer[Arrsize];
    for (int i = 0; i < Arrsize; i++) {
      decodedArr.Arr[i] = stream.readInt();
    }
    return decodedArr;
  }

  @Override
  public int hashCode() {
    return Arrays.hashCode(this.Arr);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof Arr)) {
      return false;
    }

    Arr other = (Arr) object;
    return Arrays.equals(this.Arr, other.Arr);
  }
  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static Arr fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static Arr fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
