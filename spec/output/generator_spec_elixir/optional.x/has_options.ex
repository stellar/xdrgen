defmodule MyXDR.HasOptions do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `HasOptions` type.
  """

  @behaviour XDR.Declaration

  alias MyXDR.{
    OptionalInt,
    OptionalArr
  }

  @struct_spec XDR.Struct.new(
    first_option: OptionalInt,
    second_option: OptionalInt,
    third_option: OptionalArr
  )

  @type first_option_type :: OptionalInt.t()
  @type second_option_type :: OptionalInt.t()
  @type third_option_type :: OptionalArr.t()

  @type t :: %__MODULE__{first_option: first_option_type(), second_option: second_option_type(), third_option: third_option_type()}

  defstruct [:first_option, :second_option, :third_option]

  @spec new(first_option :: first_option_type(), second_option :: second_option_type(), third_option :: third_option_type()) :: t()
  def new(
    %OptionalInt{} = first_option,
    %OptionalInt{} = second_option,
    %OptionalArr{} = third_option
  ),
  do: %__MODULE__{first_option: first_option, second_option: second_option, third_option: third_option}

  @impl true
  def encode_xdr(%__MODULE__{first_option: first_option, second_option: second_option, third_option: third_option}) do
    [first_option: first_option, second_option: second_option, third_option: third_option]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{first_option: first_option, second_option: second_option, third_option: third_option}) do
    [first_option: first_option, second_option: second_option, third_option: third_option]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [first_option: first_option, second_option: second_option, third_option: third_option]}, rest}} ->
        {:ok, {new(first_option, second_option, third_option), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [first_option: first_option, second_option: second_option, third_option: third_option]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(first_option, second_option, third_option), rest}
  end
end
