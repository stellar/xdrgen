defmodule MyXDR.MyStruct do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `MyStruct` type.
  """

  @behaviour XDR.Declaration

  alias MyXDR.{
    Int,
    Int64,
    Opaque10,
    String,
    String100
  }

  @struct_spec XDR.Struct.new(
    some_int: Int,
    a_big_int: Int64,
    some_opaque: Opaque10,
    some_string: String,
    max_string: String100
  )

  @type some_int_type :: Int.t()
  @type a_big_int_type :: Int64.t()
  @type some_opaque_type :: Opaque10.t()
  @type some_string_type :: String.t()
  @type max_string_type :: String100.t()

  @type t :: %__MODULE__{some_int: some_int_type(), a_big_int: a_big_int_type(), some_opaque: some_opaque_type(), some_string: some_string_type(), max_string: max_string_type()}

  defstruct [:some_int, :a_big_int, :some_opaque, :some_string, :max_string]

  @spec new(some_int :: some_int_type(), a_big_int :: a_big_int_type(), some_opaque :: some_opaque_type(), some_string :: some_string_type(), max_string :: max_string_type()) :: t()
  def new(
    %Int{} = some_int,
    %Int64{} = a_big_int,
    %Opaque10{} = some_opaque,
    %String{} = some_string,
    %String100{} = max_string
  ),
  do: %__MODULE__{some_int: some_int, a_big_int: a_big_int, some_opaque: some_opaque, some_string: some_string, max_string: max_string}

  @impl true
  def encode_xdr(%__MODULE__{some_int: some_int, a_big_int: a_big_int, some_opaque: some_opaque, some_string: some_string, max_string: max_string}) do
    [some_int: some_int, a_big_int: a_big_int, some_opaque: some_opaque, some_string: some_string, max_string: max_string]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{some_int: some_int, a_big_int: a_big_int, some_opaque: some_opaque, some_string: some_string, max_string: max_string}) do
    [some_int: some_int, a_big_int: a_big_int, some_opaque: some_opaque, some_string: some_string, max_string: max_string]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [some_int: some_int, a_big_int: a_big_int, some_opaque: some_opaque, some_string: some_string, max_string: max_string]}, rest}} ->
        {:ok, {new(some_int, a_big_int, some_opaque, some_string, max_string), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [some_int: some_int, a_big_int: a_big_int, some_opaque: some_opaque, some_string: some_string, max_string: max_string]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(some_int, a_big_int, some_opaque, some_string, max_string), rest}
  end
end
