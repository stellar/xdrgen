defmodule MyXDR.IntUnion2 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `IntUnion2` type.
  """

  @behaviour XDR.Declaration

  alias MyXDR.IntUnion

  @type t :: %__MODULE__{int_union2: IntUnion.t()}

  defstruct [:int_union2]

  @spec new(int_union2 :: IntUnion.t()) :: t()
  def new(%IntUnion{} = int_union2), do: %__MODULE__{int_union2: int_union2}

  @impl true
  def encode_xdr(%__MODULE__{int_union2: int_union2}) do
    IntUnion.encode_xdr(int_union2)
  end

  @impl true
  def encode_xdr!(%__MODULE__{int_union2: int_union2}) do
    IntUnion.encode_xdr!(int_union2)
  end

  @impl true
  def decode_xdr(bytes, term \\ nil)

  def decode_xdr(bytes, _term) do
    case IntUnion.decode_xdr(bytes) do
      {:ok, {%IntUnion{} = int_union2, rest}} -> {:ok, {new(int_union2), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, term \\ nil)

  def decode_xdr!(bytes, _term) do
    {%IntUnion{} = int_union2, rest} = IntUnion.decode_xdr!(bytes)
    {new(int_union2), rest}
  end
end
